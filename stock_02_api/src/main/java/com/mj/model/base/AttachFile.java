package com.mj.model.base;

import java.util.ArrayList;
import java.util.List;

import org.apache.commons.lang.ArrayUtils;
import org.apache.commons.lang.StringUtils;

import com.jfinal.plugin.activerecord.Record;
import com.mj.bean.base.BaseAttachFile;
import com.mj.kit.ConfigKit;

/**
 * Generated by JFinal.
 */
@SuppressWarnings("serial")
public class AttachFile extends BaseAttachFile<AttachFile> {
	public static final AttachFile dao = new AttachFile();
	
	// 图片
		public static String[] imageSuffix = new String[] { "jpg", "jpeg", "tiff", "raw", "bmp", "gif", "png" };

		// 在线预览
		public static String[] onLineSuffix = new String[] { "doc", "docx", "xls", "xlsx", "ppt", "pptx" };

		// 视频
		public static String[] videoSuffix = new String[] { "mp4", "webm", "ogg" };

		// 图片
		public boolean getIsImageAttach(String fileSuffx) {

			if (StringUtils.isEmpty(fileSuffx)) {
				return false;
			}
			if (ArrayUtils.contains(imageSuffix, fileSuffx)) {
				return true;
			}
			return false;
		}

		public boolean getIsImageAttach() {
			if (StringUtils.isEmpty(this.getFileSuffix())) {
				return false;
			}
			if (ArrayUtils.contains(imageSuffix, this.getFileSuffix())) {
				return true;
			}
			return false;
		}

		// 视频
		public boolean getIsVideoAttach() {
			if (StringUtils.isEmpty(this.getFileSuffix())) {
				return false;
			}
			if (ArrayUtils.contains(videoSuffix, this.getFileSuffix())) {
				return true;
			}
			return false;
		}

		public boolean getIsVideoAttach(String fileSuffx) {
			if (StringUtils.isEmpty(fileSuffx)) {
				return false;
			}
			if (ArrayUtils.contains(videoSuffix, fileSuffx)) {
				return true;
			}
			return false;
		}

		/**
		 * @Description:在线预览
		 * @author lu
		 * @version 2019 年 03 月 11 日 15:23:08
		 * @param fileSuffix
		 * @return
		 */
		public boolean getOnLineView() {
			if (StringUtils.isEmpty(getFileSuffix())) {
				return false;
			}
			if (ArrayUtils.contains(onLineSuffix, getFileSuffix())) {
				return true;
			}
			return false;
		}

		public boolean getOnLineView(String fileSuffx) {
			if (StringUtils.isEmpty(fileSuffx)) {
				return false;
			}
			if (ArrayUtils.contains(onLineSuffix, fileSuffx)) {
				return true;
			}
			return false;
		}


		public List<AttachFile> findByParams(String attachIds) {
			if (StringUtils.isEmpty(attachIds)) {
				return null;
			}
			String[] attachIdArr = StringUtils.split(attachIds, ",");
			List<AttachFile> list = new ArrayList<AttachFile>(attachIdArr.length);
			for (String attachId : attachIdArr) {
				if (StringUtils.isEmpty(attachId)) {
					continue;
				}
				AttachFile entity = this.findById(attachId);
				if (entity != null) {
					entity.put("isImageAttach", getIsImageAttach(getFileSuffix()));
					entity.put("onLineView", getOnLineView(getFileSuffix()));
					entity.put("isVideoAttach", getIsVideoAttach(getFileSuffix()));
					list.add(entity);
				}
			}
			if (list.isEmpty() || list.size() == 0) {
				return null;
			}
			return list;
		}

		public List<Record> findByParam(String attachIds) {
			if (StringUtils.isEmpty(attachIds)) {
				return null;
			}
			String[] attachIdArr = StringUtils.split(attachIds, ",");
			List<Record> list = new ArrayList<Record>(attachIdArr.length);
			for (String attachId : attachIdArr) {
				if (StringUtils.isEmpty(attachId)) {
					continue;
				}
				AttachFile entity = this.findById(attachId);
				if (entity != null) {
					Record record = new Record();
					record.set("id", entity.getId());
					record.set("file_name", entity.getFileName());
					record.set("file_suffix", entity.getFileSuffix());
					record.set("store_url", entity.getStoreUrl());
					record.set("attach_type", entity.getAttachType());
					record.set("thumb_url", entity.getThumbUrl());
					record.set("qcloud_url", entity.getQcloudUrl());
					list.add(record);
				}
			}
			if (list.isEmpty() || list.size() == 0) {
				return null;
			}
			return list;
		}

		public boolean isAttachIdExsits(String attachId) {
			if (StringUtils.isEmpty(attachId)) {
				return false;
			}
			AttachFile entity = this.findById(attachId);
			if (entity == null) {
				return false;
			}
			return true;
		}

		public AttachFile findByParam(Integer tmpId) {
			if (tmpId == null) {
				return null;
			}
			String sql = "select t.id,t.file_name,t.file_suffix,t.store_url,t.thumb_url from base_attach_file t where t.tmp_id=?";
			return this.findFirst(sql, tmpId);
		}

		/**
		 * 获得所有状态为0的attachFile
		 */
		public List<AttachFile> getInvalidAttach() {
			return find("SELECT b.id FROM base_attach_file b where b.status=0");
		}
		
		/**
		 * 通过ids获取文件后缀
		 */
		public List<AttachFile> findSuffixByIds(String attachIds){
			String sql="select t.id,t.file_suffix"
					+ " from base_attach_file t"
					+ " where t.id in('" + attachIds.replaceAll(",", "','")
					+ "')";
	        return this.find(sql);
		}
}
